package space.gavinklfong.forex.repos;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.r2dbc.DataR2dbcTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import org.springframework.test.context.jdbc.Sql;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Hooks;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;
import space.gavinklfong.forex.models.Customer;
import space.gavinklfong.forex.models.ForexRateBooking;
import space.gavinklfong.forex.models.ForexTradeDeal;

@Slf4j
@DataR2dbcTest
@Tag("UnitTest")
public class ForexTradeDealRepoTest {
	    
	@Autowired
	private R2dbcEntityTemplate r2dbcTemplate; 
	
	@Autowired
	private ForexTradeDealRepo tradeDealRepo;
	
	@BeforeEach
	void beforeEach() {
		Hooks.onOperatorDebug();

		// drop and create tables prior to the execution of each test case
		List<String> customerStmts = Arrays.asList(
				"drop table if exists customer",
				"create table customer (id bigint generated by default as identity, name varchar(255), tier integer, primary key (id))",
				
				"drop table if exists forex_rate_booking",
				"create table forex_rate_booking (id bigint generated by default as identity, base_currency varchar(255), base_currency_amount decimal(19,2), booking_ref varchar(255), counter_currency varchar(255), expiry_time timestamp, rate double, timestamp timestamp, customer_id bigint, primary key (id))",
				
				"drop table if exists forex_trade_deal",
				"create table forex_trade_deal (id bigint generated by default as identity, base_currency varchar(255), base_currency_amount decimal(19,2), counter_currency varchar(255), deal_ref varchar(255), rate double, timestamp timestamp, customer_id bigint, primary key (id))"
				);

		customerStmts.forEach(s -> 
			r2dbcTemplate.getDatabaseClient()
			.sql(s)
			.fetch()
			.rowsUpdated()
			.as(StepVerifier::create)
			.expectNextCount(1)
			.verifyComplete()
		);		
		
	}
	
	/**
	 * Verify the behaviour for customer without trade deal record
	 * 
	 */
	@Test
	void findByCustomerId_withRecords() {

		// insert test data		
		ForexTradeDeal deal1 = new ForexTradeDeal(1l, "DEAL-REF-01", 
				LocalDateTime.now(), "GBP", "USD", 1.25d, new BigDecimal(1000), 2l); 		
		ForexTradeDeal deal2 = new ForexTradeDeal(2l, "DEAL-REF-02", 
				LocalDateTime.now(), "GBP", "CAD", 1.5, new BigDecimal(5000), 2l); 		
		
		List<ForexTradeDeal> deals = Arrays.asList(deal1, deal2);
		deals.forEach(d -> 
			r2dbcTemplate.insert(d)
			.as(StepVerifier::create)
			.expectNextCount(1)
			.verifyComplete()
		);
		
		// assert repos method
		tradeDealRepo.findByCustomerId(2l)
		.as(StepVerifier::create)
		.expectNextMatches(t -> {
			if (t.getId() == 1l) return t.getDealRef().contentEquals("DEAL-REF-01");
			if (t.getId() == 2l) return t.getDealRef().contentEquals("DEAL-REF-02");
			return false;
		})
		.expectNextMatches(t -> {
			if (t.getId() == 1l) return t.getDealRef().contentEquals("DEAL-REF-01");
			if (t.getId() == 2l) return t.getDealRef().contentEquals("DEAL-REF-02");
			return false;
		})		
		.verifyComplete();
		
	}	
	
	
	/**
	 * Verify the behaviour for customer with no trade deal record
	 * 
	 */
	@Test
	void findByCustomerId_NoRecord() {

		tradeDealRepo.findByCustomerId(1l)
		.as(StepVerifier::create)
		.expectComplete()
		.verify();				
		
	}
	
	
}
