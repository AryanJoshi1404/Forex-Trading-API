version: 2.1

orbs:
  sonarcloud: extendaretail/sonarcloud@0.0.2
  sonarsource: sonarsource/sonarcloud@1.0.0

jobs:
  build:
    docker:
      - image: 'circleci/openjdk:11-jdk'
    
#     working_directory: ~/reactive-spring-forex-trade
      
    steps:
      # get source from git
      - checkout
      
      # Download and cache dependencies
      - restore_cache:
          keys:
            - reactive-spring-forex-trade-{{ checksum "pom.xml" }}
            - reactive-spring-forex-trade-          
      - run: mvn dependency:go-offline
      
      # Compile & Run Unti Test
      - run:
          name: Compile
          command: mvn compile -P no-test

      - save_cache:
          paths:
            - ~/.m2
          key: reactive-spring-forex-trade-{{ checksum "pom.xml" }}      

      - run:
          name: Analyze
          command: > 
            mvn verify sonar:sonar -P no-test
            
            mkdir .scannerwork
            
            cp target/sonar/report-task.txt .scannerwork/report-task.txt
            
      - persist_to_workspace:
          paths:
            - .scannerwork/report-task.txt
          root: .
          
#       - sonarcloud/scan_with_maven:
#           scanner_version: 3.8.0.213

#       - run: >
      
#           REPORT_PATH="target/sonar/report-task.txt"
#           #SONAR_AUTH_TOKEN="57bbf0d59b06e62bfb9c2908858a0d922a648cbf"
#           CE_TASK_ID_KEY="ceTaskId="
#           SONAR_INSTANCE="https://sonarcloud.io"
#           SLEEP_TIME=5
#           ce_task_id=$(cat $REPORT_PATH | grep $CE_TASK_ID_KEY | cut -d'=' -f2)
#           #ce_task_id=AXgd-DfnBtMM2inRW0fj
#           echo "Using task id of ${ce_task_id}"
#           if [ -z "$ce_task_id" ]; then
#             echo "No task id found"
#             exit 1
#           fi
#           wait_for_success=true
#           while [ "${wait_for_success}" = "true" ]
#           do
#             ce_status=$(curl -s -u "${SONAR_AUTH_TOKEN}": "${SONAR_INSTANCE}"/api/ce/task?id=${ce_task_id} | jq -r .task.status)
#             echo "Status of SonarQube task is ${ce_status}"
#             if [ "${ce_status}" = "CANCELLED" ]; then
#               echo "SonarQube Compute job has been cancelled - exiting with error"
#               exit 504
#             fi
#             if [ "${ce_status}" = "FAILED" ]; then
#               echo "SonarQube Compute job has failed - exit with error"
#               exit 500
#             fi
#             if [ "${ce_status}" = "SUCCESS" ]; then
#               wait_for_success=false
#             fi
#             sleep "${SLEEP_TIME}"
#           done
          
#           ce_analysis_id=$(curl -s -u ${SONAR_AUTH_TOKEN}: ${SONAR_INSTANCE}/api/ce/task?id=$ce_task_id | jq -r .task.analysisId)
#           echo "Using analysis id of ${ce_analysis_id}"
#           # get the status of the quality gate for this analysisId
#           qg_status=$(curl -s -u ${SONAR_AUTH_TOKEN}: ${SONAR_INSTANCE}/api/qualitygates/project_status?analysisId="${ce_analysis_id}" | jq -r .projectStatus.status)
#           echo "Quality Gate status is ${qg_status}"
#           if [ "${qg_status}" != "OK" ]; then
#             echo "Quality gate is not OK - exiting with error"
#             exit 1
#           fi     

#   test:
#     docker:
#       - image: 'circleci/openjdk:11-jdk'
#     steps:
#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             - reactive-spring-forex-trade-{{ checksum "pom.xml" }}    
    
#       - run:
#           name: Run Integratin Test
#           command: mvn test -P integration-test
          
#       - run:
#           name: Run End-to-End Test
#           command: mvn verify -P e2e-test
      
workflows:
  main:
    jobs:
      - build:
          context: SonarCloud
      - sonarcloud/check_quality_gate:
          context: SonarCloud
          requires:
            - build
#       - test:
#           requires:
#             - sonarcloud/check_quality_gate
